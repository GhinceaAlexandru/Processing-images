"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var gm = require("gm");
var engine_1 = require("./engine");
var Promisify_1 = require("../texture-atlas-packer/Promisify");
var ImageMagickImageProcessor = (function () {
    function ImageMagickImageProcessor(options) {
        this.options = options;
        this.gm = gm.subClass(options);
    }
    ImageMagickImageProcessor.prototype.getSize = function (path) {
        var state = this.gm(path);
        // console.log(path, typeof state.size);
        //
        // state.size((er, d) => {
        //   console.log(er, d);
        // });
        return Promisify_1.promisify(state.size.bind(state))();
    };
    ImageMagickImageProcessor.prototype.scale = function (input, output, scale) {
        var resized = this.gm(input).resize(scale.width, scale.height, '!');
        return Promisify_1.promisify(resized.write.bind(resized))(output);
    };
    ImageMagickImageProcessor.prototype.trim = function (input, output, fuzz) {
        var _this = this;
        fuzz = fuzz || '0%';
        var imageWithBorder = this.gm(input)
            .borderColor('none')
            .border(1, 1);
        return Promisify_1.promisify(imageWithBorder.toBuffer.bind(imageWithBorder))()
            .then(function (data) {
            var image = _this.gm(data).trim();
            return Promisify_1.promisify(image.identify.bind(image))('%@');
        })
            .then(function (d) {
            var data = d.match(/^(\d+)x(\d+)\+(\d+)\+(\d+)$/);
            var width = parseInt(data[1], 10);
            var height = parseInt(data[2], 10);
            var x = parseInt(data[3], 10) - 1;
            var y = parseInt(data[4], 10) - 1;
            if (width === 0 || height === 0) {
                // precaution: never use 0x0 images
                width = 1;
                height = 1;
                x = 0;
                y = 0;
            }
            var crop = _this.gm(input)
                .crop(width, height, x, y);
            return Promisify_1.promisify(crop.write.bind(crop))(output)
                .then(function () {
                return { width: width, height: height, x: x, y: y };
            });
        });
    };
    ;
    ImageMagickImageProcessor.prototype.combine = function (rects, width, height, outputFileName, exportConfig) {
        var exportOptions = { format: exportConfig.ext ? exportConfig.ext : 'png' };
        if (exportConfig.ext === 'jpeg' && exportConfig.quality) {
            exportOptions.quality = exportConfig.quality;
        }
        var gmsmith = new engine_1.default(this.options);
        var paths = rects.map(function (rect) { return rect.data.data.path; });
        return Promisify_1.promisify(gmsmith.createImages.bind(gmsmith))(paths)
            .then(function (images) {
            var canvas = gmsmith.createCanvas(width, height);
            images.forEach(function (image, i) {
                canvas.addImage(image, rects[i].x, rects[i].y);
            });
            return Promisify_1.promisify(canvas.export2.bind(canvas))(exportOptions);
        })
            .then(function (buffer) { return exportConfig.compressor ? exportConfig.compressor(buffer) : buffer; })
            .then(function (buffer) { return Promisify_1.promisify(fs.writeFile)(outputFileName, buffer); });
    };
    return ImageMagickImageProcessor;
}());
exports.default = ImageMagickImageProcessor;
//# sourceMappingURL=ImageMagickImageProcessor.js.map