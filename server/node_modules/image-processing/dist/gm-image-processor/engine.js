"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var gm = require("gm");
var async = require("async");
var canvas_1 = require("./canvas");
var Gmsmith = (function () {
    function Gmsmith(options) {
        this.gm = gm.subClass(options);
    }
    Gmsmith.prototype.createCanvas = function (width, height) {
        // Generate our canvas and then callback with it in a bit
        return new canvas_1.default(width, height, this);
    };
    Gmsmith.prototype.createImage = function (file, callback) {
        // If the file is an object (i.e. a vinyl object)
        if (typeof file === 'object') {
            // If it's not null, warn the users about loading excess content
            if (!file.isNull()) {
                console.warn('`gmsmith` doesn\'t support in-memory content ' +
                    'but we saw in-memory content for "' + file.path + '". ' +
                    'This can be disabled via `read: false` in `gulp.src`');
            }
            // Use the file path from the vinyl object
            file = file.path;
        }
        // Create the image
        var img = this.gm(file);
        // In series...
        async.waterfall([
            // Grab the size
            function getImgSize(cb) {
                img.size(cb);
            },
            function saveImgSize(size, cb) {
                // Create a structure for preserving the height and width of the image
                var imgFile = {
                    height: size.height,
                    width: size.width,
                    file: file
                };
                // Callback with the imgFile
                cb(null, imgFile);
            }
        ], callback);
    };
    Gmsmith.prototype.createImages = function (files, callback) {
        // Map the files into their image counterparts
        // DEV: Magic number of 10 to prevent file descriptor overuse
        // This does not affect perf -- 12 seconds with 300, 11.5 with 10 for 2000 images (derp)
        async.mapLimit(files, 10, this.createImage.bind(this), callback);
    };
    return Gmsmith;
}());
exports.default = Gmsmith;
//# sourceMappingURL=engine.js.map