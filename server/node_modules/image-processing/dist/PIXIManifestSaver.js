"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var Promisify_1 = require("./texture-atlas-packer/Promisify");
function PIXIManifestSaver(atlasIndex, generateOptions, res) {
    return Promise.all(res.atlases[atlasIndex].sheets.map(function (sheet, sheetIndex) {
        var outputFilePath = generateOptions.atlasPageMetaPathResolver(atlasIndex, sheetIndex, res);
        var sheetPath = generateOptions.atlasPageImagePathResolver(atlasIndex, sheetIndex, res);
        sheet.path = sheetPath;
        var manifestRaw = {
            frames: {},
            meta: {
                image: sheetPath,
                format: "RGBA8888",
                size: { 'w': sheet.width, 'h': sheet.height },
                scale: '1',
            }
        };
        sheet.sprites.forEach(function (sprite) {
            var spriteName = generateOptions.sriteNameResolver(atlasIndex, sprite.path, res);
            manifestRaw.frames[spriteName] = {
                frame: {
                    x: sprite.position.x,
                    y: sprite.position.y,
                    w: sprite.trim ? sprite.trim.w : sprite.dimension.w,
                    h: sprite.trim ? sprite.trim.h : sprite.dimension.h
                },
                rotated: false,
                trimmed: !!sprite.trim,
                spriteSourceSize: {
                    x: sprite.trim ? sprite.trim.x : 0,
                    y: sprite.trim ? sprite.trim.y : 0,
                    w: sprite.trim ? sprite.trim.w : sprite.dimension.w,
                    h: sprite.trim ? sprite.trim.h : sprite.dimension.h,
                },
                sourceSize: {
                    w: sprite.dimension.w,
                    h: sprite.dimension.h
                }
            };
        });
        var raw = JSON.stringify(manifestRaw, null, 4);
        return Promisify_1.promisify(fs.writeFile)(outputFilePath, raw);
    }));
}
exports.default = PIXIManifestSaver;
//# sourceMappingURL=PIXIManifestSaver.js.map