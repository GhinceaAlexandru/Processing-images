"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var crypto = require("crypto");
var ScaledSprite_1 = require("./ScaledSprite");
var Promisify_1 = require("./Promisify");
var Sprite = (function () {
    function Sprite(spritePath, convertOptions, cache, imageProcessor) {
        this.cache = cache;
        this.imageProcessor = imageProcessor;
        this.path = spritePath;
        this.convertOptions = convertOptions;
    }
    Sprite.prototype.calculateSize = function () {
        return this.imageProcessor.getSize(this.path);
    };
    Sprite.prototype.createAndProcessScaledVersions = function (queue) {
        var _this = this;
        this.scaledSprites = this.convertOptions.map(function (convertOption) {
            return new ScaledSprite_1.default(_this, convertOption, _this.cache, _this.imageProcessor);
        });
        return Promise.all(this.scaledSprites.map(function (scaledSprite) {
            return queue.add(function () { return scaledSprite.process(); });
        }));
    };
    Sprite.prototype.calculateHash = function () {
        var _this = this;
        return Promisify_1.promisify(fs.stat)(this.path)
            .then(function (stat) {
            // stat.mtime.getTime() is not in here because it causes problems with git
            var identifier = _this.path + ' ' + stat.size;
            _this.hash = crypto.createHash('sha1').update(identifier).digest('hex');
        });
    };
    Sprite.prototype.cacheMiss = function () {
        return this.calculateSize()
            .then(function (size) {
            return {
                width: size.width,
                height: size.height
            };
        });
    };
    Sprite.prototype.cacheInterpret = function (data) {
        this.width = data.width;
        this.height = data.height;
    };
    Sprite.prototype.process = function (queue) {
        var _this = this;
        return this.calculateHash()
            .then(function () { return _this.cache.lookup('sprite', _this.hash, _this.cacheMiss.bind(_this)); })
            .then(this.cacheInterpret.bind(this))
            .then(function () { return _this.createAndProcessScaledVersions(queue); })
            .then(function () { return _this; });
    };
    return Sprite;
}());
exports.default = Sprite;
//# sourceMappingURL=Sprite.js.map