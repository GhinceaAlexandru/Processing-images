"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var crypto = require("crypto");
var Spritesheet_1 = require("./Spritesheet");
var MultiBinPacker_1 = require("./MultiBinPacker");
var AtlasGroup = (function () {
    function AtlasGroup(scaledSprites, layoutConfig, exportConfig, cache, imageProcessor, log) {
        this.scaledSprites = scaledSprites;
        this.layoutConfig = layoutConfig;
        this.exportConfig = exportConfig;
        this.cache = cache;
        this.imageProcessor = imageProcessor;
        this.log = log;
        this.spritesheets = [];
        this.hash = this.calculateHash();
    }
    AtlasGroup.prototype.calculateHash = function () {
        var hash = crypto.createHash('sha1');
        hash.update(this.scaledSprites.map(function (i) { return i.hash; }).sort().join(" "));
        hash.update(JSON.stringify(this.layoutConfig, null, 2));
        hash.update(JSON.stringify(this.exportConfig, null, 2));
        return hash.digest('hex');
    };
    AtlasGroup.prototype.process = function (queue) {
        var _this = this;
        var packer = new MultiBinPacker_1.MultiBinPacker(this.layoutConfig.max_width, this.layoutConfig.max_height, this.layoutConfig.padding);
        packer.addArray(this.scaledSprites.map(function (scaledSprite) {
            return {
                width: scaledSprite.trim ? scaledSprite.trim.width : scaledSprite.width,
                height: scaledSprite.trim ? scaledSprite.trim.height : scaledSprite.height,
                data: scaledSprite
            };
        }));
        if (this.layoutConfig.oversized_warning) {
            packer.oversizedElements.map(function (bin) {
                _this.log.warn('Oversized sprite: ' + bin.data.sprite.path +
                    ' with size ' + bin.width + 'x' + bin.height);
            });
        }
        this.spritesheets = packer.bins.map(function (bin) {
            return new Spritesheet_1.default(_this, bin, _this.exportConfig, _this.cache, _this.imageProcessor);
        });
        return Promise.all(this.spritesheets.map(function (spritesheet) {
            return queue.add(function () { return spritesheet.process(queue); });
        }));
    };
    return AtlasGroup;
}());
exports.default = AtlasGroup;
//# sourceMappingURL=AtlasGroup.js.map