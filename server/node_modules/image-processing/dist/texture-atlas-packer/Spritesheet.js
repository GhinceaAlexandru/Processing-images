"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs-extra");
var crypto = require("crypto");
var path = require("path");
var Spritesheet = (function () {
    function Spritesheet(atlasGroup, bin, exportConfig, cache, imageProcessor) {
        this.bin = bin;
        this.exportConfig = exportConfig;
        this.hash = this.calculateHash(atlasGroup);
        this.cache = cache;
        this.imageProcessor = imageProcessor;
    }
    Spritesheet.prototype.copyFiles = function (outputPath) {
        var outputImagePath = path.join(outputPath, this.basename);
        return fs.copy(this.cachedImagePath, outputImagePath);
    };
    Spritesheet.prototype.createImage = function (cachedImagePath) {
        this.width = this.bin.width;
        this.height = this.bin.height;
        return this.imageProcessor.combine(this.bin.rects, this.width, this.height, cachedImagePath, this.exportConfig);
    };
    Spritesheet.prototype.createLoadingInformation = function () {
        return this.bin.rects.map(function (rect) {
            var scaledSprite = rect.data.data;
            var sprite = scaledSprite.sprite;
            var result = {
                path: sprite.path,
                position: {
                    x: rect.x,
                    y: rect.y
                },
                dimension: {
                    w: scaledSprite.width,
                    h: scaledSprite.height
                },
                trim: null
            };
            if (scaledSprite.trim) {
                result.trim = {
                    x: scaledSprite.trim.x,
                    y: scaledSprite.trim.y,
                    w: scaledSprite.trim.width,
                    h: scaledSprite.trim.height
                };
            }
            return result;
        });
    };
    Spritesheet.prototype.cacheMiss = function () {
        var _this = this;
        var cachedImagePath = this.cache.getCachePath(this.basename);
        return this.createImage(cachedImagePath)
            .then(function () {
            return Promise.all([
                _this.createLoadingInformation(),
                fs.stat(cachedImagePath)
            ]);
        })
            .then(function (results) {
            var loadingInformation = results[0];
            var outputFilesize = results[1].size;
            return {
                cachedImagePath: cachedImagePath, loadingInformation: loadingInformation, outputFilesize: outputFilesize,
                width: _this.width,
                height: _this.height
            };
        });
    };
    Spritesheet.prototype.cacheInterpret = function (data) {
        this.cachedImagePath = data.cachedImagePath;
        this.loadingInformation = data.loadingInformation;
        this.outputFilesize = data.outputFilesize;
        this.width = data.width;
        this.height = data.height;
    };
    Object.defineProperty(Spritesheet.prototype, "basename", {
        get: function () {
            return this.hash + '.' + (this.exportConfig.ext ? this.exportConfig.ext : 'png');
        },
        enumerable: true,
        configurable: true
    });
    Spritesheet.prototype.calculateHash = function (atlasGroup) {
        var hash = crypto.createHash('sha1');
        hash.update(atlasGroup.hash);
        hash.update(this.bin.rects.map(function (rect) {
            return rect.data.data.path + '_' + rect.x + '_' + rect.y;
        }).sort().join(' ') + '_');
        hash.update(JSON.stringify(this.exportConfig, null, 2));
        return hash.digest('hex');
    };
    Spritesheet.prototype.process = function (queue) {
        var _this = this;
        return this.cache.lookup('spritesheet', this.hash, this.cacheMiss.bind(this), 3)
            .then(this.cacheInterpret.bind(this))
            .then(function () { return _this; });
    };
    Spritesheet.prototype.copy = function (outputPath) {
        return this.copyFiles(outputPath);
    };
    return Spritesheet;
}());
exports.default = Spritesheet;
//# sourceMappingURL=Spritesheet.js.map